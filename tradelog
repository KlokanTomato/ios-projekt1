#!/bin/bash

#AUTOR: Adam Cologna
#LOGIN: xcolog00

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8
export LC_ALL=C

print_help()
{	
	echo "USAGE:"
	echo "tradelog [-h|--help]"
	echo "tradelog [filter...] [command] [LOG...]"
	echo ""
	echo "COMMANDS:"
	echo "list-tick – prints out the list of tickers"
	echo "profit – prints out the profit from closed positions"
	echo "pos – prints out the values from closed positions ordered from the biggest downwards"
	echo "last-price – prints out the last price of a given ticker"
	echo "hist-ord – prints out the histogram based on the amounts of transactions of the ticker"
	echo "graph-pos – prints out a graph of values help on a given position by a ticker"
	echo ""
	echo "FILTERS:"
	echo "-a DATETIME – after: shows data only after the given date, the format of the date is YYYY-MM-DD HH:MM:SS."
	echo "-b DATETIME – before: shows data only before the given date"
	echo "-t TICKER – returns the data with coresponding to the ticker (or multiple tickers) given"
	echo "-w WIDTH – sets the width of the longest line when printing out a graph, giving more than one -w filter results in a wrong way to run the program."
}


var_list_tick(){
	echo "$(echo "$1" | awk -F";" '{print $2 | "sort -u"}')"
}

var_profit()
{
	profit=0.00
	while read -r line; do
		sell_or_buy=$(echo $line | awk -F";" '{print $3}')
		amount=$(echo $line | awk -F";" '{print $6}')
		price=$(echo $line | awk -F";" '{print $4}')
		value=$(echo "$price * $amount" | bc)

		if [ "$sell_or_buy" = "buy" ]; then
			profit=$( echo "$profit - $value" | bc )
		elif [ "$sell_or_buy" = "sell" ]; then
			profit=$( echo "$profit + $value" | bc )
		fi
	done <<< "$1"
	echo "$profit"
}

mod_var_profit() #function to calculate the amount of held units
{
	profit=0.00
	while read -r line; do
		sell_or_buy=$(echo $line | awk -F";" '{print $3}')
		value=$(echo $line | awk -F";" '{print $6}')

		if [ "$sell_or_buy" = "buy" ]; then
			profit=$( echo "$profit + $value" | bc )
		elif [ "$sell_or_buy" = "sell" ]; then
			profit=$( echo "$profit - $value" | bc )
		fi
	done <<< "$1"
	echo "$profit"
}

after_date() #returns line inputed after a given date
{
	while read -r line; do
		my_date=$(echo $line | awk -F";" '{print $1}')
		if [[ "$my_date" > "$2" ]]; then
			echo "$line"
		fi	 
	done <<< "$1"
}

before_date() #returns line inputed before a given date
{
	while read -r line; do
		my_date=$(echo $line | awk -F";" '{print $1}')
		if [[ "$my_date" < "$2" ]]; then
			echo "$line"
		fi	 
	done <<< "$1"
}

ticker_filter() #returns the lines with the correct filter
{
	while read -r line; do
		ticker=$(echo $line | awk -F";" '{print $2}')
		for i in "${ticker_array[@]}"
		do
			if [ "$i" == "$ticker" ] ; then
				echo "$line"
			fi
		done
	done <<< "$1"
}

var_last_price()
{	
	tmpinput=$(echo "$1" | sort -r)
	last_price_arr=()
	arr_price=()
	while read -r line; do
		ticker=$(echo $line | awk -F";" '{print $2}')
		bool_found="false"

		for i in "${last_price_arr[@]}"
		do
    		if [ "$i" == "$ticker" ]; then
        		bool_found="true"
			fi
		done

		if [ "$bool_found" = "false" ]; then
			price=$(echo $line | awk -F";" '{print $4}')
			arr_price+=("$price")
			last_price_arr+=("$ticker")
		fi
	done  <<< "$tmpinput"

	max=0 
	for n in "${arr_price[@]}"; do
		awk 'BEGIN{if ('$n'>'$max') exit 1}'
		if [ $? -eq 1 ];then
			max=$n
		fi
	done

	longest_num=${#max}
	for ((i=0; i<${#last_price_arr[@]}; i++)); do
		ticker="${last_price_arr[i]}"
		price="${arr_price[i]}"
    	printf "%-10s: %*.2f\n" $ticker $longest_num $price
	done | sort
}

sorting_func()
{
	while read -r line; do
		ticker=$(echo $line | awk -F";" '{print $2}')
		if [ "$1" == "$ticker" ] ; then
			echo "$line"
		fi
	done <<< "$input_file"
}

filtered_sorting_func()
{
	while read -r line; do
		ticker=$(echo $line | awk -F";" '{print $2}')
		if [ "$1" == "$ticker" ] ; then
			echo "$line"
		fi
	done <<< "$filtered_data"
}

mod_var_last_price()
{	
	tmpinput=$(echo "$1" | sort -r)
	last_price_arr=()
	arr_price=()
	while read -r line; do
		ticker=$(echo $line | awk -F";" '{print $2}')
		bool_found="false"

		for i in "${last_price_arr[@]}"
		do
    		if [ "$i" == "$ticker" ]; then
        		bool_found="true"
			fi
		done

		if [ "$bool_found" = "false" ]; then
			price=$(echo $line | awk -F";" '{print $4}')
			arr_price+=("$price")
			last_price_arr+=("$ticker")
		fi
	done  <<< "$tmpinput"

	for ((i=0; i<${#last_price_arr[@]}; i++)); do
		ticker="${last_price_arr[i]}"
		price="${arr_price[i]}"
    	echo "$price"
	done
}

pos()
{
	tmp_ticks_arr=()
	arr_pos_nums=()
	ticks=$(var_list_tick "$1")
	
	while read -r line; do
		tmp_ticks_arr+=("$line")	
	done <<< "$ticks"

	for i in "${tmp_ticks_arr[@]}"
	do
		if [ -z "$filtered_data" ]; then
			changed_file=$(sorting_func "$i")
		else
			changed_file=$(filtered_sorting_func "$i")
		fi
		tck_profit=$(mod_var_profit "$changed_file")
		last_price=$(mod_var_last_price "$changed_file")
		pos_number=$(echo "$tck_profit * $last_price" | bc)
		arr_pos_nums+=("$pos_number")
	done

	max=0
	for n in "${arr_pos_nums[@]}"; do
		awk 'BEGIN{if ('${#n}'>'${#max}') exit 1}' #finding the longest number
		if [ $? -eq 1 ]; then
			max=$n
		fi
	done
	
	longest_num=${#max}
	for ((i=0; i<${#tmp_ticks_arr[@]}; i++)); do
		ticker="${tmp_ticks_arr[i]}"
		pos_num="${arr_pos_nums[i]}"
    	printf "%-10s: %*.2f\n" $ticker $longest_num $pos_num
	done
}

ticker_array=()
file_array=()
w_array=()

while [ "$#" -gt 0 ]; do #initial while to get the commands and the filters
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		print_help #calling the help function
		exit 0
	fi
	
	if [[ "$1" == *".log"* ]]; then #getting the file
  		given_file="$1"
		file_array+=("$1")
	fi
	
	if [ "$1" = "list-tick" ] || [ "$1" = "profit" ] || [ "$1" = "pos" ] || [ "$1" = "last-price" ] || [ "$1" = "hist-ord" ] || [ "$1" = "graph-pos" ]; then
		command="$1"
	fi
	if [ "$1" = "-a" ] || [ "$1" = "-b" ] || [ "$1" = "-t" ] || [ "$1" = "-w" ]; then
		filter="$1"
		if [ -z "$2" ]; then
			echo "Invalid argument."
			exit 1
		fi
		after_filter="$2"
		if [ "$1" = "-t" ];then
			ticker_array+=("$2")
		fi
		if [ "$1" = "-w" ];then
			w_array+=("$2")
		fi
		shift
	fi
	shift #moving onto the next argument
done

if [ ! -t 0 ]; then
	input_file="$(< /dev/stdin)"
else
	if [[ "$given_file" == *".gz"* ]] && [ "$filter" = "-t" ] ; then
		var=$(echo "$(zcat -f "$given_file")")
		ticker_filter "$var"
	else
		for i in "${file_array[@]}"
		do
			input_file="${input_file} ${i}"
		done
		input_file=$(zcat -f $input_file | sort)
	fi
fi

w_length=$(echo "${#w_array[@]}") #checking the length of the array, if it contains more than one element it will result in exiting the program
if [ $w_length -gt 1 ]; then
	echo "Too many -w filters given."
	exit 1
else
	width=$(echo "${w_array[0]}") #saving the first element of the array into the variable, will be empty if the array is empty as well
fi


if [[ -z "$filter" ]] && [ -z "$command" ]; then
	echo "$input_file"
fi

if [[ ! -z "$filter" ]] && [[ ! -z "$command" ]]; then
	bool_extra="true" #i have to do extra stuff if there is a command and filter as well
else
	bool_extra="false"
fi

#filters
if [ "$filter" = "-a" ]; then
	filtered_data=$(after_date "$input_file" "$after_filter")
fi

if [ "$filter" = "-b" ]; then
	filtered_data=$(before_date "$input_file" "$after_filter")
fi

if [ "$filter" = "-t" ]; then
	filtered_data=$(ticker_filter "$input_file")
fi

if [ "$bool_extra" = "false" ] && [[ ! -z "$filtered_data" ]]; then
	echo "$filtered_data" #if there are filters only, there is no need to move on and just print the saved filtered_data
	exit 0
fi	

#EXECUTING COMMANDS

if [ "$command" = "profit" ] && [ "$bool_extra" = "true" ]; then
	var_profit "$filtered_data" #calling the modified function (filtered_data = filtered data)
elif [ "$command" = "profit" ] && [ "$bool_extra" = "false" ]; then
	var_profit "$input_file" #no filters are given, execute the command on the original file
fi

if [ "$command" = "list-tick" ] && [ "$bool_extra" = "true" ]; then
	var_list_tick "$filtered_data"
elif [ "$command" = "list-tick" ] && [ "$bool_extra" = "false" ]; then
	var_list_tick "$input_file"
fi

if [ "$command" = "last-price" ] && [ "$bool_extra" = "true" ]; then
	var_last_price "$filtered_data"
elif [ "$command" = "last-price" ] && [ "$bool_extra" = "false" ]; then
	var_last_price "$input_file"
fi

if [ "$command" = "pos" ] && [ "$bool_extra" = "true" ]; then
	pos "$filtered_data" | sort -t: -k 2nr
elif [ "$command" = "pos" ] && [ "$bool_extra" = "false" ]; then
	pos "$input_file" | sort -t: -k 2nr
fi

